services:
  app:
    build: .
    ports:
      - '3000:3000'
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=geoservice
      # OpenTelemetry yapılandırması
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=geo-service
      - OTEL_RESOURCE_ATTRIBUTES=service.name=geo-service,deployment.environment=development
      # Kafka yapılandırması
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
      kafka:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully
    volumes:
      - ./:/app
      - /app/node_modules

  # Kafka topic'lerini oluşturmak için başlangıç servisi
  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # Kafka'nın hazır olmasını bekle
      echo 'Waiting for Kafka to be ready...'
      cub kafka-ready -b kafka:9092 1 30

      # Topic'leri oluştur
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic location-events --partitions 3 --replication-factor 1

      echo 'Successfully created Kafka topics'
      "

  postgres:
    image: postgis/postgis:15-3.3
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=geoservice
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - '5050:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Kafka ve Zookeeper servisleri
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    healthcheck:
      test: ['CMD-SHELL', 'echo srvr | nc localhost 2181 || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: 'location-events:3:1,location-events.dlq:1:1'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'kafka-topics --bootstrap-server localhost:9092 --list || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Kafka yönetim arayüzü
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_started

  # Jaeger servisi
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - '16686:16686' # Web UI
      - '9411:9411' # Zipkin endpoint
      - '4317:4317' # OTLP gRPC
      - '4318:4318' # OTLP HTTP
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://localhost:16686']
      interval: 5s
      timeout: 5s
      retries: 10

  # Prometheus servisi
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - app
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://localhost:9090/-/healthy']
      interval: 5s
      timeout: 5s
      retries: 10

  # Grafana servisi
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:
